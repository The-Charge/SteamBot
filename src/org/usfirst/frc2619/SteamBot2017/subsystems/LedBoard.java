// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SteamBot2017.subsystems;

import org.usfirst.frc2619.SteamBot2017.RobotMap;
import org.usfirst.frc2619.SteamBot2017.TheChargeDashboard;
import org.usfirst.frc2619.SteamBot2017.commands.*;
import edu.wpi.first.wpilibj.DigitalOutput;
import edu.wpi.first.wpilibj.Relay;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class LedBoard extends Subsystem {
	public int choice = 0;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final Relay ledSpike = RobotMap.ledBoardLedSpike;
    private final DigitalOutput ledOutput0 = RobotMap.ledBoardLedOutput0;
    private final DigitalOutput ledOutput1 = RobotMap.ledBoardLedOutput1;
    private final DigitalOutput ledOutput2 = RobotMap.ledBoardLedOutput2;
    private final DigitalOutput ledOutput3 = RobotMap.ledBoardLedOutput3;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void writeDefaultDashboardValues() {
		TheChargeDashboard.putNumber("LEDOutput", 0);
		//SmartDashboard.putNumber("Choice", choice);
	}

	public void bitmap() {
		choice = (int) SmartDashboard.getNumber("LEDOutput", 0);

		// bitmapping
		if ((choice & 0b0001) == 0b0001)
			RobotMap.ledBoardLedOutput0.set(true);
		else
			RobotMap.ledBoardLedOutput0.set(false);
		if ((choice & 0b0010) == 0b0010)
			RobotMap.ledBoardLedOutput1.set(true);
		else
			RobotMap.ledBoardLedOutput1.set(false);
		if ((choice & 0b0100) == 0b0100)
			RobotMap.ledBoardLedOutput2.set(true);
		else
			RobotMap.ledBoardLedOutput2.set(false);
		if ((choice & 0b1000) == 0b1000)
			RobotMap.ledBoardLedOutput3.set(true);
		else
			RobotMap.ledBoardLedOutput3.set(false);
	}

	public void bitmap(int c) {
		choice = c;

		// bitmapping
		if ((choice & 0b0001) == 0b0001)
			RobotMap.ledBoardLedOutput0.set(true);
		else
			RobotMap.ledBoardLedOutput0.set(false);
		if ((choice & 0b0010) == 0b0010)
			RobotMap.ledBoardLedOutput1.set(true);
		else
			RobotMap.ledBoardLedOutput1.set(false);
		if ((choice & 0b0100) == 0b0100)
			RobotMap.ledBoardLedOutput2.set(true);
		else
			RobotMap.ledBoardLedOutput2.set(false);
		if ((choice & 0b1000) == 0b1000)
			RobotMap.ledBoardLedOutput3.set(true);
		else
			RobotMap.ledBoardLedOutput3.set(false);
	}

	public void bitmapRandom() {
		choice = (int) (Math.random() * 7) + 7;
		if (choice == 11) {
			choice = 0;
		}

		// bitmapping
		if ((choice & 0b0001) == 0b0001)
			RobotMap.ledBoardLedOutput0.set(true);
		else
			RobotMap.ledBoardLedOutput0.set(false);
		if ((choice & 0b0010) == 0b0010)
			RobotMap.ledBoardLedOutput1.set(true);
		else
			RobotMap.ledBoardLedOutput1.set(false);
		if ((choice & 0b0100) == 0b0100)
			RobotMap.ledBoardLedOutput2.set(true);
		else
			RobotMap.ledBoardLedOutput2.set(false);
		if ((choice & 0b1000) == 0b1000)
			RobotMap.ledBoardLedOutput3.set(true);
		else
			RobotMap.ledBoardLedOutput3.set(false);
	}

	public void offLED() {
		ledSpike.set(Relay.Value.kOff);
	}

	public void onLED() {
		ledSpike.set(Relay.Value.kForward);
	}

}
