// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SteamBot2017.subsystems;

import org.usfirst.frc2619.SteamBot2017.RobotMap;
import org.usfirst.frc2619.SteamBot2017.TheChargeDashboard;
import org.usfirst.frc2619.SteamBot2017.commands.*;
import com.ctre.WPI_TalonSRX;
import com.ctre.WPI_TalonSRX.TalonControlMode;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Indexer extends Subsystem {
	private final static double INDEX_P_CONSTANT = 0.001;
	private final static double INDEX_I_CONSTANT = 0.0;
	private final static double INDEX_D_CONSTANT = 0;
	private final static double INDEX_F_CONSTANT = 3.7;

	double SpeedP = INDEX_P_CONSTANT;
	double SpeedI = INDEX_I_CONSTANT;
	double SpeedD = INDEX_D_CONSTANT;
	double SpeedF = INDEX_F_CONSTANT;

	private final static int MAX_TICKS_PER_SECOND = 285;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final WPI_TalonSRX indexerMotor = RobotMap.indexerIndexerMotor;
    private final DigitalInput indexerDI = RobotMap.indexerIndexerDI;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public void writeDefaultDashboardValues() {
		TheChargeDashboard.putNumber("IndexerSpeedP", INDEX_P_CONSTANT);
		TheChargeDashboard.putNumber("IndexerSpeedI", INDEX_I_CONSTANT);
		TheChargeDashboard.putNumber("IndexerSpeedD", INDEX_D_CONSTANT);
		TheChargeDashboard.putNumber("IndexerSpeedF", INDEX_F_CONSTANT);
	}

	public void readDashboardControlValues() {
		SpeedP = SmartDashboard.getNumber("IndexerSpeedP", INDEX_P_CONSTANT);
		SpeedI = SmartDashboard.getNumber("IndexerSpeedI", INDEX_I_CONSTANT);
		SpeedD = SmartDashboard.getNumber("IndexerSpeedD", INDEX_D_CONSTANT);
		SpeedF = SmartDashboard.getNumber("IndexerSpeedF", INDEX_F_CONSTANT);

		// set WPI_TalonSRX PIDs
		indexerMotor.setPID(SpeedP, SpeedI, SpeedD, SpeedF, 0, 0, 0);
	}

	public void initSpeedPercentageMode() {
		indexerMotor.changeControlMode(TalonControlMode.Speed);

		indexerMotor.setProfile(0);

		indexerMotor.configMaxOutputVoltage(12);
	}

	public void set(double percentSpeed) {
		// Sets what speed the motors will run at.
		indexerMotor.enable();
		indexerMotor.setSetpoint(MAX_TICKS_PER_SECOND * percentSpeed);
	}

	public void stop() {
		indexerMotor.setSetpoint(0);
		indexerMotor.disable();
	}

	public boolean isAtDI() {
		return !indexerDI.get();
	}

	public void writeDebugValues() {
		TheChargeDashboard.putNumber("IndexerSetPoint", indexerMotor.getSetpoint());
		TheChargeDashboard.putNumber("IndexerError", indexerMotor.getError());
		TheChargeDashboard.putNumber("IndexMeasuredValue", indexerMotor.getEncVelocity());
		TheChargeDashboard.putBoolean("IndexerDI", isAtDI());
	}
}
