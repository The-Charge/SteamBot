// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2619.SteamBot2017;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc2619.SteamBot2017.commands.*;
import org.usfirst.frc2619.SteamBot2017.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	CameraServer server;

	Command autonomousCommand;
	SendableChooser<Command> chooser = new SendableChooser<>();

	public static OI oi;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shifters shifters;
    public static ShooterMotors shooterMotors;
    public static GearPlunger gearPlunger;
    public static GearDoors gearDoors;
    public static LedBoard ledBoard;
    public static RopeClimber ropeClimber;
    public static CameraLights cameraLights;
    public static BallPickup ballPickup;
    public static Indexer indexer;
    public static CANLights cANLights;
    public static Vision vision;
    public static Ultrasonic ultrasonic;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {

		RobotMap.init();

		server = CameraServer.getInstance();
		server.startAutomaticCapture("cam2", 0);
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shifters = new Shifters();
        shooterMotors = new ShooterMotors();
        gearPlunger = new GearPlunger();
        gearDoors = new GearDoors();
        ledBoard = new LedBoard();
        ropeClimber = new RopeClimber();
        cameraLights = new CameraLights();
        ballPickup = new BallPickup();
        indexer = new Indexer();
        cANLights = new CANLights();
        vision = new Vision();
        ultrasonic = new Ultrasonic();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		// SmartDashboard.putData(driveTrain);
		// SmartDashboard.putData(indexer);
		shooterMotors.initSpeedPercentageMode();
		ballPickup.initSpeedPercentageMode();
		indexer.initSpeedPercentageMode();
		cANLights.displayCANLightValues();
		// OI must be constructed after subsystems. If the OI creates Commands
		// (which it very likely will), subsystems are not guaranteed to be
		// constructed yet. Thus, their requires() statements may grab null
		// pointers. Bad news. Don't move it.
		oi = new OI();

		// instantiate the command used for the autonomous period
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
		driveTrain.writeDefaultValues();
		shooterMotors.writeDefaultDashboardValues();
		ballPickup.writeDefaultDashboardValues();
		indexer.writeDefaultDashboardValues();
		ledBoard.writeDefaultDashboardValues();
		
		ledBoard.onLED();

		chooser.addObject("Blue Shoot Only", new BlueShoot());
		chooser.addObject("Left Blue Drive", new GearPegLeftAutonBlueDrive());
		chooser.addObject("Left Blue Shoot", new GearPegLeftAutonBlueShoot());
		chooser.addObject("Left Red Drive", new GearPegLeftAutonRed());
		chooser.addDefault("Middle Blue", new GearPegMiddleAutonBlue());
		chooser.addObject("Middle Red", new GearPegMiddleAutonRed());
		chooser.addObject("Right Blue Drive", new GearPegRightAutonBlue());
		chooser.addObject("Right Red Drive", new GearPegRightAutonRedDrive());
		chooser.addObject("Right Red Shoot", new GearPegRightAutonRedShoot());
		chooser.addObject("Red Shoot Only", new RedShoot());

		TheChargeDashboard.putData("AutoMode", chooser);
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		Robot.driveTrain.zeroYaw();
		autonomousCommand = chooser.getSelected();

		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
		ledBoard.onLED();
		Robot.ledBoard.bitmap(1);
		Robot.cANLights.colorAlliance();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		readAndWriteDashboardValues();
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.
		if (autonomousCommand != null)
			autonomousCommand.cancel();
		Robot.indexer.stop();
		Robot.shifters.ShiftHigh();
		Robot.ledBoard.bitmapRandom();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		// readAndWriteDashboardValues();
		Scheduler.getInstance().run();
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}

	public void readAndWriteDashboardValues() {
		driveTrain.readControlValues();
		driveTrain.writeDebugValues();
		shooterMotors.readDashboardControlValues();
		ballPickup.readDashboardControlValues();
		ballPickup.writeDebugValues();
		indexer.readDashboardControlValues();
		indexer.writeDebugValues();
		ultrasonic.writeUSDebug();
	}
}
